{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./error.service\";\nexport class AuthService {\n  constructor(http, router, errorService) {\n    this.http = http;\n    this.router = router;\n    this.errorService = errorService;\n    this.isLogedin = false;\n    this.tokenRes = {\n      token: ''\n    };\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.checkIsLogedIn();\n  }\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigateByUrl('login');\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n  signup(userData) {\n    this.http.post(Apis.auth.signup, userData).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n        this.router.navigateByUrl('');\n      },\n      error: error => this.errorService.handelError(error)\n    });\n  }\n  login(userData) {\n    this.http.post(Apis.auth.login, userData).subscribe({\n      next: res => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + ' ' + this.tokenRes.token);\n        this.router.navigateByUrl('');\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      },\n      error: error => this.errorService.handelError(error)\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ErrorService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAASA,IAAI,QAAQ,eAAe;;;;;AAKpC,OAAM,MAAOC,WAAW;EAKtBC,YACUC,IAAgB,EAChBC,MAAc,EACdC,YAA0B;IAF1B,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IAPf,cAAS,GAAY,KAAK;IACzB,aAAQ,GAAQ;MAAEC,KAAK,EAAE;IAAE,CAAE;IAC7B,gBAAW,GAAQ;MAAEC,MAAM,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAE,CAAE;IAOpD,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACR,MAAM,CAACS,aAAa,CAAC,OAAO,CAAC;;IAEpC,IAAIH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,IAAI;;EAEzB;EAEAE,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACN,cAAc,EAAE;EACvB;EAEAO,MAAM,CAACC,QAAc;IACnB,IAAI,CAACd,IAAI,CAACe,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAACH,MAAM,EAAEC,QAAQ,CAAC,CAACG,SAAS,CAAC;MACnDC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,WAAW,GAAGD,GAAG;QACtB,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,IAAI,CAACF,WAAW,CAACf,OAAO,EAAE,EAAE,EAAE;UAChDkB,WAAW,EAAE;SACd,CAAC;QACF,IAAI,CAACtB,MAAM,CAACS,aAAa,CAAC,EAAE,CAAC;MAC/B,CAAC;MACDc,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACtB,YAAY,CAACuB,WAAW,CAACD,KAAK;KACtD,CAAC;EACJ;EAEAE,KAAK,CAACZ,QAAc;IAClB,IAAI,CAACd,IAAI,CAACe,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAACU,KAAK,EAAEZ,QAAQ,CAAC,CAACG,SAAS,CAAC;MAClDC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACQ,QAAQ,GAAGR,GAAG;QACnBZ,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAE,QAAQ,GAAG,GAAG,GAAG,IAAI,CAACD,QAAQ,CAACxB,KAAK,CAAC;QAEnE,IAAI,CAACF,MAAM,CAACS,aAAa,CAAC,EAAE,CAAC;QAE7BmB,UAAU,CAAC,MAAK;UACdC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC1B,CAAC,EAAE,IAAI,CAAC;MACV,CAAC;MACDR,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACtB,YAAY,CAACuB,WAAW,CAACD,KAAK;KACtD,CAAC;EACJ;;AAvDW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmC,SAAXnC,WAAW;EAAAoC,YAFV;AAAM","names":["Apis","AuthService","constructor","http","router","errorService","token","status","message","checkIsLogedIn","localStorage","getItem","isLogedin","navigateByUrl","logout","removeItem","signup","userData","post","auth","subscribe","next","res","apiResponse","toastr","success","progressBar","error","handelError","login","tokenRes","setItem","setTimeout","window","location","reload","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { ErrorService } from './error.service';\nimport { Router } from '@angular/router';\nimport { user } from './../models/user';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Apis } from '../utils/apis';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public isLogedin: boolean = false;\n  private tokenRes: any = { token: '' };\n  private apiResponse: any = { status: '', message: '' };\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private errorService: ErrorService\n  ) {\n    this.checkIsLogedIn();\n  }\n\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigateByUrl('login');\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n\n  signup(userData: user) {\n    this.http.post(Apis.auth.signup, userData).subscribe({\n      next: (res) => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n        this.router.navigateByUrl('');\n      },\n      error: (error) => this.errorService.handelError(error),\n    });\n  }\n\n  login(userData: user) {\n    this.http.post(Apis.auth.login, userData).subscribe({\n      next: (res) => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + ' ' + this.tokenRes.token);\n\n        this.router.navigateByUrl('');\n\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      },\n      error: (error) => this.errorService.handelError(error),\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}