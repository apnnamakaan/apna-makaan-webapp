{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport class ErrorService {\n  constructor(toastr) {\n    this.toastr = toastr;\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n  }\n  showToastW(message) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      toastClass: 'top-center'\n    });\n  }\n  handelError(error) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n      default:\n        {\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n            toastClass: 'top-center'\n          });\n          break;\n        }\n    }\n  }\n}\nErrorService.ɵfac = function ErrorService_Factory(t) {\n  return new (t || ErrorService)(i0.ɵɵinject(i1.ToastrService));\n};\nErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorService,\n  factory: ErrorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAMvBC,YAAoBC,MAAqB;IAArB,WAAM,GAANA,MAAM;IALnB,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;EAE2C;EAE5CC,UAAU,CAACD,OAAc;IACvB,IAAI,CAACF,MAAM,CAACI,OAAO,CAACF,OAAO,EAAE,EAAE,EAAE;MAC/BG,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE;KACb,CAAC;EACJ;EAEAC,WAAW,CAACC,KAAU;IACpB,QAAQA,KAAK,CAACP,MAAM;MAClB,KAAK,CAAC;QACJ,IAAI,CAACE,UAAU,CAAC,oBAAoB,CAAC;QACrC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,uBAAuB,CAAC;QACxC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,aAAa,CAAC;QAC9B;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,qBAAqB,CAAC;QACtC;MAEF;QAAS;UACP,IAAI,CAACM,WAAW,GAAGD,KAAK,CAACA,KAAK;UAC9B,IAAI,CAACR,MAAM,CAACI,OAAO,CAAC,IAAI,CAACK,WAAW,CAACP,OAAO,EAAE,EAAE,EAAE;YAChDG,WAAW,EAAE,IAAI;YACjBC,UAAU,EAAE;WACb,CAAC;UACF;;IACD;EAEL;;AA1CWR,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAY,SAAZZ,YAAY;EAAAa,YAFX;AAAM","names":["ErrorService","constructor","toastr","status","message","showToastW","warning","progressBar","toastClass","handelError","error","apiResponse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\error.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService {\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(private toastr: ToastrService) {}\n\n  showToastW(message:string){\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      toastClass: 'top-center',\n    });\n  }\n\n  handelError(error: any) {\n    switch (error.status) {\n      case 0: \n        this.showToastW('Connection Refused');\n        break;\n  \n      case 500: \n        this.showToastW('Internal Server Error');\n        break;\n\n      case 502: \n        this.showToastW('Bad Gateway');\n        break;\n      \n      case 503: \n        this.showToastW('Service Unavailable');\n        break;\n\n      default: {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true,\n          toastClass: 'top-center',\n        });\n        break;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}