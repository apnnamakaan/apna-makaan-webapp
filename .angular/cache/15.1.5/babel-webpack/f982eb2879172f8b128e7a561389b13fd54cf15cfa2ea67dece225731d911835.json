{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {}\n  getUser() {\n    this.http.post(Apis.signup, userData).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n        this.checkIsLogedIn();\n      },\n      error: error => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,eAAgB;EAEhBC,OAAO;IACL,IAAI,CAACC,IAAI,CAACC,IAAI,CAACL,IAAI,CAACM,MAAM,EAAEC,QAAQ,CAAC,CAACC,SAAS,CAAC;MAC9CC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,WAAW,GAAGD,GAAG;QACtB,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,IAAI,CAACF,WAAW,CAACG,OAAO,EAAE,EAAE,EAAE;UAChDC,WAAW,EAAE;SACd,CAAC;QACF,IAAI,CAACC,cAAc,EAAE;MACvB,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACN,WAAW,GAAGM,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACL,MAAM,CAACM,OAAO,CAAC,IAAI,CAACP,WAAW,CAACG,OAAO,EAAE,EAAE,EAAE;UAChDC,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;;AArBWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["Apis","UserService","constructor","getUser","http","post","signup","userData","subscribe","next","res","apiResponse","toastr","success","message","progressBar","checkIsLogedIn","error","warning","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  http: any;\n\n  constructor() { }\n\n  getUser(){\n    this.http.post(Apis.signup, userData).subscribe({\n      next: (res) => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n        this.checkIsLogedIn();\n      },\n      error: (error) => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}