{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"ngx-toastr\";\nexport class UserService {\n  constructor(authSevices, http, toastr) {\n    this.authSevices = authSevices;\n    this.http = http;\n    this.toastr = toastr;\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.verifyResponse = {\n      email: ''\n    };\n    this.userData = {\n      name: '',\n      phone: 0,\n      email: '',\n      password: ''\n    };\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    if (authSevices.isLogedin) this.getUser();\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getUser() {\n    this.http.post(Apis.auth.verify, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        // this.userData = res as user;\n      },\n      error: error => {\n        //if (error.status == 401) this.authSevices.logout();\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n    this.http.get(Apis.user.getUserByEmail, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.userData = res;\n      },\n      error: error => {\n        if (error.status == 401) this.authSevices.logout();\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n  updateUser(userData) {\n    this.http.put(Apis.user.updateUserByEmail + userData.email, userData, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      },\n      error: error => {\n        if (error.status == 401) this.authSevices.logout();\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ToastrService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Apis","HttpHeaders","UserService","constructor","authSevices","http","toastr","status","message","email","name","phone","password","authorization","getToken","isLogedin","getUser","localStorage","getItem","post","auth","verify","headers","subscribe","next","res","error","apiResponse","warning","progressBar","get","user","getUserByEmail","userData","logout","updateUser","put","updateUserByEmail","success","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { AuthService } from 'src/app/shared/services/auth.service';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { user } from './../models/user';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  public verifyResponse :any={\n    email:''\n  }\n\n  public userData: user = {\n    name: '',\n    phone: 0,\n    email: '',\n    password: '',\n  };\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  constructor(\n    private authSevices: AuthService,\n    private http: HttpClient,\n    private toastr: ToastrService\n  ) {\n    if (authSevices.isLogedin) this.getUser();\n  }\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getUser() {\n\n    this.http\n      .post(Apis.auth.verify, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n         // this.userData = res as user;\n        },\n        error: (error) => {\n          //if (error.status == 401) this.authSevices.logout();\n\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n      });\n\n    this.http\n      .get(Apis.user.getUserByEmail, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.userData = res as user;\n        },\n        error: (error) => {\n          if (error.status == 401) this.authSevices.logout();\n\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n      });\n  }\n\n  updateUser(userData: user) {\n    this.http\n      .put(Apis.user.updateUserByEmail + userData.email, userData, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.apiResponse = res;\n          this.toastr.success(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n        error: (error) => {\n          if (error.status == 401) this.authSevices.logout();\n\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}