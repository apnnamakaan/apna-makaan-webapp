{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PropertyService {\n  constructor(http) {\n    this.http = http;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getProperties() {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByFilter(data) {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers\n    });\n  }\n  uploadImage(file) {\n    var formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(Apis.image.uploadImage, formData);\n  }\n  uploadProperty(property) {\n    return this.http.post(Apis.property.uploadPropertie, property, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByEmail(email) {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers\n    });\n  }\n  removePropertyById(id) {\n    return this.http.post(Apis.property.removePropertyById + id, {\n      headers: this.headers\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,eAAe;EAM1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALjB,YAAO,GAAQ,IAAIH,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDI,aAAa,EAAE,IAAI,CAACC,QAAQ;KAC7B,CAAC;EAEqC;EAEvCA,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAC,aAAa;IACX,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAACV,IAAI,CAACW,QAAQ,CAACC,gBAAgB,EAAE;MACnDC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAC,qBAAqB,CAACC,IAAS;IAC7B,IAAIC,GAAG,GAAG,SAASD,IAAI,CAACE,IAAI,QAAQF,IAAI,CAACG,GAAG,SAASH,IAAI,CAACI,IAAI,WAAWJ,IAAI,CAACK,MAAM,QAAQL,IAAI,CAACM,GAAG,QAAQN,IAAI,CAACO,GAAG,EAAE;IACtH,OAAO,IAAI,CAAClB,IAAI,CAACM,GAAG,CAACV,IAAI,CAACW,QAAQ,CAACG,qBAAqB,GAAGE,GAAG,EAAE;MAC9DH,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAU,WAAW,CAACC,IAAU;IACpB,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC7BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO,IAAI,CAACpB,IAAI,CAACwB,IAAI,CAAC5B,IAAI,CAAC6B,KAAK,CAACN,WAAW,EAAEE,QAAQ,CAAC;EACzD;EAEAK,cAAc,CAACnB,QAAkB;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACwB,IAAI,CAAC5B,IAAI,CAACW,QAAQ,CAACoB,eAAe,EAAEpB,QAAQ,EAAE;MAC7DE,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAmB,oBAAoB,CAACC,KAAa;IAChC,OAAO,IAAI,CAAC7B,IAAI,CAACM,GAAG,CAACV,IAAI,CAACW,QAAQ,CAACqB,oBAAoB,GAAGC,KAAK,EAAE;MAC/DpB,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAqB,kBAAkB,CAACC,EAAU;IAC3B,OAAO,IAAI,CAAC/B,IAAI,CAACwB,IAAI,CAAC5B,IAAI,CAACW,QAAQ,CAACuB,kBAAkB,GAAGC,EAAE,EAAE;MAC3DtB,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;;AA/CWX,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAkC,SAAflC,eAAe;EAAAmC,YAFd;AAAM","names":["Apis","HttpHeaders","PropertyService","constructor","http","authorization","getToken","localStorage","getItem","getProperties","get","property","getAllProperties","headers","getPropertiesByFilter","data","uri","city","bed","bath","garage","min","max","uploadImage","file","formData","FormData","append","post","image","uploadProperty","uploadPropertie","getPropertiesByEmail","email","removePropertyById","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from './../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  constructor(private http: HttpClient) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getProperties(): any {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByFilter(data: any): any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers,\n    });\n  }\n\n  uploadImage(file: File): any {\n    var formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(Apis.image.uploadImage, formData);\n  }\n\n  uploadProperty(property: property) {\n    return this.http.post(Apis.property.uploadPropertie, property, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByEmail(email: string): any {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers,\n    });\n  }\n\n  removePropertyById(id: number): any {\n    return this.http.post(Apis.property.removePropertyById + id, {\n      headers: this.headers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}