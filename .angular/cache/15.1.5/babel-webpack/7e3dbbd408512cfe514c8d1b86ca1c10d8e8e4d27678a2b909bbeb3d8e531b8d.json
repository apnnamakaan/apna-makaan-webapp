{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"./error.service\";\nexport class UserService {\n  constructor(authSevices, http, toastr, errorService) {\n    this.authSevices = authSevices;\n    this.http = http;\n    this.toastr = toastr;\n    this.errorService = errorService;\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.verifyResponse = {\n      email: ''\n    };\n    this.userData = {\n      name: '',\n      phone: 0,\n      email: '',\n      password: ''\n    };\n    this.headers = new HttpHeaders();\n    if (this.authSevices.isLogedin) this.getUser();\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getUser() {\n    this.http.get(Apis.user.getUserByToken, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.userData = res;\n      },\n      error: error => this.errorService.handelError(error)\n    });\n  }\n  updateUser(userData) {\n    this.http.put(Apis.user.updateUserByEmail + userData.email, userData, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.getUser();\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      },\n      error: error => this.errorService.handelError(error)\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.ErrorService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;;;;AAO9D,OAAM,MAAOC,WAAW;EAmBtBC,YACUC,WAAwB,EACxBC,IAAgB,EAChBC,MAAqB,EACrBC,YAA0B;IAH1B,gBAAW,GAAXH,WAAW;IACX,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IAtBf,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;IAEM,mBAAc,GAAQ;MAC3BC,KAAK,EAAE;KACR;IAEM,aAAQ,GAAS;MACtBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,CAAC;MACRF,KAAK,EAAE,EAAE;MACTG,QAAQ,EAAE;KACX;IAEM,YAAO,GAAQ,IAAIZ,WAAW,EAAE;IAQrC,IAAI,IAAI,CAACG,WAAW,CAACU,SAAS,EAAE,IAAI,CAACC,OAAO,EAAE;EAChD;EAEAC,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAH,OAAO;IACL,IAAI,CAACV,IAAI,CACNc,GAAG,CAACnB,IAAI,CAACoB,IAAI,CAACC,cAAc,EAAE;MAC7BC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,QAAQ,GAAGD,GAAW;MAC7B,CAAC;MACDE,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACpB,YAAY,CAACqB,WAAW,CAACD,KAAK;KACtD,CAAC;EACN;EAEAE,UAAU,CAACH,QAAc;IACvB,IAAI,CAACrB,IAAI,CACNyB,GAAG,CAAC9B,IAAI,CAACoB,IAAI,CAACW,iBAAiB,GAAGL,QAAQ,CAAChB,KAAK,EAAEgB,QAAQ,EAAE;MAC3DJ,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACO,WAAW,GAAGP,GAAG;QACtB,IAAI,CAACV,OAAO,EAAE;QACd,IAAI,CAACT,MAAM,CAAC2B,OAAO,CAAC,IAAI,CAACD,WAAW,CAACvB,OAAO,EAAE,EAAE,EAAE;UAChDyB,WAAW,EAAE;SACd,CAAC;MACJ,CAAC;MACDP,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACpB,YAAY,CAACqB,WAAW,CAACD,KAAK;KACtD,CAAC;EACN;;AA5DWzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["Apis","HttpHeaders","UserService","constructor","authSevices","http","toastr","errorService","status","message","email","name","phone","password","isLogedin","getUser","getToken","localStorage","getItem","get","user","getUserByToken","headers","subscribe","next","res","userData","error","handelError","updateUser","put","updateUserByEmail","apiResponse","success","progressBar","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { ErrorService } from './error.service';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { user } from './../models/user';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  public verifyResponse: any = {\n    email: '',\n  };\n\n  public userData: user = {\n    name: '',\n    phone: 0,\n    email: '',\n    password: '',\n  };\n\n  public headers: any = new HttpHeaders();\n\n  constructor(\n    private authSevices: AuthService,\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private errorService: ErrorService\n  ) {\n    if (this.authSevices.isLogedin) this.getUser();\n  }\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getUser() {\n    this.http\n      .get(Apis.user.getUserByToken, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.userData = res as user;\n        },\n        error: (error) => this.errorService.handelError(error),\n      });\n  }\n\n  updateUser(userData: user) {\n    this.http\n      .put(Apis.user.updateUserByEmail + userData.email, userData, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.apiResponse = res;\n          this.getUser();\n          this.toastr.success(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n        error: (error) => this.errorService.handelError(error),\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}