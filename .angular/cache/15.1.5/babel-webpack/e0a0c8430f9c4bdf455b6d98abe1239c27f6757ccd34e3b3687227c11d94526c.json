{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pika/Documents/apna-makaan/apna-makaan-webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./helper.service\";\nexport class PropertyService {\n  constructor(http, toastr, helperService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.helperService = helperService;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getProperties() {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByFilter(data) {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers\n    });\n  }\n  uploadImage(file) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var formData = new FormData();\n      formData.append('file', file);\n      const uplaod = _this.http.post(Apis.image.uploadImage, formData);\n      uplaod.subscribe({\n        next: res => {\n          console.log(res.image);\n          return res.image;\n        },\n        error: err => {\n          _this.helperService.handelError(err);\n        }\n      });\n    })();\n  }\n  uploadProperty(property, file) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      property.image = yield _this2.uploadImage(file);\n      console.log(property);\n      if (property.image != null && property.image != '') {\n        _this2.http.post(Apis.property.uploadPropertie, property, {\n          headers: _this2.headers\n        }).subscribe({\n          next: res => {\n            _this2.helperService.showToastS(res.message);\n            _this2.helperService.reloadCurrentRoute();\n          },\n          error: error => {\n            _this2.helperService.handelError(error);\n          }\n        });\n      } else {\n        console.log('okl');\n      }\n    })();\n  }\n  uploadPropertyHelper(property) {}\n  getPropertiesByEmail(email) {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.HelperService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Apis","HttpHeaders","PropertyService","constructor","http","toastr","helperService","authorization","getToken","status","message","localStorage","getItem","getProperties","get","property","getAllProperties","headers","getPropertiesByFilter","data","uri","city","bed","bath","garage","min","max","uploadImage","file","formData","FormData","append","uplaod","post","image","subscribe","next","res","console","log","error","err","handelError","uploadProperty","uploadPropertie","showToastS","reloadCurrentRoute","uploadPropertyHelper","getPropertiesByEmail","email","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from './../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HelperService } from './helper.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private helperService: HelperService\n  ) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getProperties(): any {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByFilter(data: any): any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers,\n    });\n  }\n\n  async uploadImage(file: File): Promise<any> {\n    var formData = new FormData();\n    formData.append('file', file);\n\n     const uplaod = this.http.post(Apis.image.uploadImage, formData)\n     \n      uplaod.subscribe({\n      next: (res: any) => {\n        console.log(res.image);\n        return res.image;\n      },\n      error: (err: any) => {\n        this.helperService.handelError(err);\n      },\n    });\n  }\n\n  async uploadProperty(property: property, file: any): Promise<any> {\n    property.image = (await this.uploadImage(file)) as string;\n    console.log(property);\n\n    if (property.image != null && property.image != '') {\n      this.http\n        .post(Apis.property.uploadPropertie, property, {\n          headers: this.headers,\n        })\n        .subscribe({\n          next: (res: any) => {\n            this.helperService.showToastS(res.message);\n            this.helperService.reloadCurrentRoute();\n          },\n          error: (error: any) => {\n            this.helperService.handelError(error);\n          },\n        });\n    } else {\n      console.log('okl');\n    }\n  }\n\n  uploadPropertyHelper(property: property): any {}\n\n  getPropertiesByEmail(email: string): any {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}