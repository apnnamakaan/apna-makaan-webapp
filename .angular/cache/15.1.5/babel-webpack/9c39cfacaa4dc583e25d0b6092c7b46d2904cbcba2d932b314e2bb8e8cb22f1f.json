{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { GlobalData } from '../../shared/utils/data';\nlet SellComponent = class SellComponent {\n  constructor(authService, propertyService, router, userService, errorService) {\n    this.authService = authService;\n    this.propertyService = propertyService;\n    this.router = router;\n    this.userService = userService;\n    this.errorService = errorService;\n    this.data = GlobalData;\n    this.property = {\n      id: 100,\n      name: '',\n      area: 0,\n      bed: 0,\n      bath: 0,\n      garage: 0,\n      city: '',\n      price: 0,\n      user: '',\n      active: true,\n      image: ''\n    };\n    this.authService.checkIsLogedIn();\n  }\n  // Setter for body\n  setName(value) {\n    this.property.name = value;\n  }\n  setCity(value) {\n    this.property.city = value;\n  }\n  setBed(value) {\n    this.property.bed = value;\n  }\n  setBath(value) {\n    this.property.bath = value;\n  }\n  setGarage(value) {\n    this.property.garage = value;\n  }\n  setArea(value) {\n    this.property.area = value;\n  }\n  setPrice(value) {\n    this.property.price = value;\n  }\n  setImage(value) {\n    this.property.image = value;\n  }\n  uploadProperty(prperty) {\n    this.propertyService.uploadProperty(prperty).subscribe({\n      next: res => {\n        this.errorService.showToastS(res.message);\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n  uploadButtonClick() {\n    this.property.user = this.userService.userData.email;\n    if (!this.errorService.handelEmptyFilds(this.property)) {\n      this.uploadProperty(this.property);\n      this.errorService.reloadCurrentRoute();\n    }\n  }\n};\nSellComponent = __decorate([Component({\n  selector: 'app-sell',\n  templateUrl: './sell.component.html',\n  styles: []\n})], SellComponent);\nexport { SellComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,UAAU,QAAQ,yBAAyB;AAU7C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAmBxBC,YACUC,WAAwB,EACxBC,eAAgC,EAChCC,MAAc,EACdC,WAAwB,EACxBC,YAA0B;IAJ1B,gBAAW,GAAXJ,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,iBAAY,GAAZC,YAAY;IAvBtB,SAAI,GAAQP,UAAU;IAIf,aAAQ,GAAa;MAC1BQ,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,CAAC;MACPC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,CAAC;MACTC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;KACR;IASC,IAAI,CAACf,WAAW,CAACgB,cAAc,EAAE;EACnC;EAEA;EACAC,OAAO,CAACC,KAAU;IAChB,IAAI,CAACC,QAAQ,CAACb,IAAI,GAAGY,KAAe;EACtC;EACAE,OAAO,CAACF,KAAU;IAChB,IAAI,CAACC,QAAQ,CAACR,IAAI,GAAGO,KAAe;EACtC;EACAG,MAAM,CAACH,KAAU;IACf,IAAI,CAACC,QAAQ,CAACX,GAAG,GAAGU,KAAe;EACrC;EACAI,OAAO,CAACJ,KAAU;IAChB,IAAI,CAACC,QAAQ,CAACV,IAAI,GAAGS,KAAe;EACtC;EACAK,SAAS,CAACL,KAAU;IAClB,IAAI,CAACC,QAAQ,CAACT,MAAM,GAAGQ,KAAe;EACxC;EACAM,OAAO,CAACN,KAAU;IAChB,IAAI,CAACC,QAAQ,CAACZ,IAAI,GAAGW,KAAe;EACtC;EACAO,QAAQ,CAACP,KAAU;IACjB,IAAI,CAACC,QAAQ,CAACP,KAAK,GAAGM,KAAe;EACvC;EACAQ,QAAQ,CAACR,KAAU;IACjB,IAAI,CAACC,QAAQ,CAACJ,KAAK,GAAGG,KAAe;EACvC;EAEAS,cAAc,CAACC,OAAiB;IAC9B,IAAI,CAAC3B,eAAe,CAAC0B,cAAc,CAACC,OAAO,CAAC,CAACC,SAAS,CAAC;MACrDC,IAAI,EAAGC,GAAQ,IAAI;QACjB,IAAI,CAAC3B,YAAY,CAAC4B,UAAU,CAACD,GAAG,CAACE,OAAO,CAAC;MAC3C,CAAC;MACDC,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAAC9B,YAAY,CAAC+B,WAAW,CAACD,KAAK,CAAC;MACtC;KACD,CAAC;EACJ;EAEAE,iBAAiB;IACf,IAAI,CAACjB,QAAQ,CAACN,IAAI,GAAG,IAAI,CAACV,WAAW,CAACkC,QAAQ,CAACC,KAAK;IACpD,IAAI,CAAC,IAAI,CAAClC,YAAY,CAACmC,gBAAgB,CAAC,IAAI,CAACpB,QAAQ,CAAC,EAAE;MACtD,IAAI,CAACQ,cAAc,CAAC,IAAI,CAACR,QAAQ,CAAC;MAClC,IAAI,CAACf,YAAY,CAACoC,kBAAkB,EAAE;;EAE1C;CACD;AAzEY1C,aAAa,eALzBF,SAAS,CAAC;EACT6C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,MAAM,EAAE;CACT,CAAC,GACW7C,aAAa,CAyEzB;SAzEYA,aAAa","names":["Component","GlobalData","SellComponent","constructor","authService","propertyService","router","userService","errorService","id","name","area","bed","bath","garage","city","price","user","active","image","checkIsLogedIn","setName","value","property","setCity","setBed","setBath","setGarage","setArea","setPrice","setImage","uploadProperty","prperty","subscribe","next","res","showToastS","message","error","handelError","uploadButtonClick","userData","email","handelEmptyFilds","reloadCurrentRoute","selector","templateUrl","styles"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\pages\\sell\\sell.component.ts"],"sourcesContent":["import { UserService } from 'src/app/shared/services/user.service';\nimport { PropertyService } from './../../shared/services/property.service';\nimport { Component } from '@angular/core';\nimport { AuthService } from './../../shared/services/auth.service';\nimport { GlobalData } from '../../shared/utils/data';\nimport { property } from 'src/app/shared/models/property';\nimport { Router } from '@angular/router';\nimport { H } from 'src/app/shared/services/helper.service';\n\n@Component({\n  selector: 'app-sell',\n  templateUrl: './sell.component.html',\n  styles: [],\n})\nexport class SellComponent {\n  data: any = GlobalData;\n\n  public imageFile: any;\n\n  public property: property = {\n    id: 100,\n    name: '',\n    area: 0,\n    bed: 0,\n    bath: 0,\n    garage: 0,\n    city: '',\n    price: 0,\n    user: '',\n    active: true,\n    image: '',\n  };\n\n  constructor(\n    private authService: AuthService,\n    private propertyService: PropertyService,\n    private router: Router,\n    private userService: UserService,\n    private errorService: ErrorService\n  ) {\n    this.authService.checkIsLogedIn();\n  }\n\n  // Setter for body\n  setName(value: any) {\n    this.property.name = value as string;\n  }\n  setCity(value: any) {\n    this.property.city = value as string;\n  }\n  setBed(value: any) {\n    this.property.bed = value as number;\n  }\n  setBath(value: any) {\n    this.property.bath = value as number;\n  }\n  setGarage(value: any) {\n    this.property.garage = value as number;\n  }\n  setArea(value: any) {\n    this.property.area = value as number;\n  }\n  setPrice(value: any) {\n    this.property.price = value as number;\n  }\n  setImage(value: any) {\n    this.property.image = value as string;\n  }\n\n  uploadProperty(prperty: property) {\n    this.propertyService.uploadProperty(prperty).subscribe({\n      next: (res: any) => {\n        this.errorService.showToastS(res.message);\n      },\n      error: (error: any) => {\n        this.errorService.handelError(error);\n      },\n    });\n  }\n\n  uploadButtonClick() {\n    this.property.user = this.userService.userData.email;\n    if (!this.errorService.handelEmptyFilds(this.property)) {\n      this.uploadProperty(this.property);\n      this.errorService.reloadCurrentRoute();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}