{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./helper.service\";\nexport class PropertyService {\n  constructor(http, toastr, helperService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.helperService = helperService;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getProperties() {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByFilter(data) {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers\n    });\n  }\n  uploadImage(file) {\n    var formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(Apis.image.uploadImage, formData);\n  }\n  uploadProperty(data, file) {\n    var imageResponse = {\n      status: '',\n      message: '',\n      image: ''\n    };\n    this.uploadImage(file).subscribe({\n      next: res => {\n        imageResponse = res;\n        data.image = res.image;\n        if (data.image != null) return this.http.post(Apis.property.uploadPropertie, data, {\n          headers: this.headers\n        });\n      },\n      error: err => {\n        this.helperService.handelError(err);\n        return null;\n      }\n    });\n  }\n  getPropertiesByEmail(email) {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.HelperService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;;;AAO9D,OAAM,MAAOC,eAAe;EAW1BC,YACUC,IAAgB,EAChBC,MAAqB,EACrBC,aAA4B;IAF5B,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,kBAAa,GAAbC,aAAa;IAbhB,YAAO,GAAQ,IAAIL,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDM,aAAa,EAAE,IAAI,CAACC,QAAQ;KAC7B,CAAC;IAEK,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;EAME;EAEHF,QAAQ;IACN,OAAOG,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAC,aAAa;IACX,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAACC,gBAAgB,EAAE;MACnDC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAC,qBAAqB,CAACC,IAAS;IAC7B,IAAIC,GAAG,GAAG,SAASD,IAAI,CAACE,IAAI,QAAQF,IAAI,CAACG,GAAG,SAASH,IAAI,CAACI,IAAI,WAAWJ,IAAI,CAACK,MAAM,QAAQL,IAAI,CAACM,GAAG,QAAQN,IAAI,CAACO,GAAG,EAAE;IACtH,OAAO,IAAI,CAACtB,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAACG,qBAAqB,GAAGE,GAAG,EAAE;MAC9DH,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAU,WAAW,CAACC,IAAU;IACpB,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC7BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO,IAAI,CAACxB,IAAI,CAAC4B,IAAI,CAAChC,IAAI,CAACiC,KAAK,CAACN,WAAW,EAAEE,QAAQ,CAAC;EACzD;EAEAK,cAAc,CAACf,IAAc,EAAES,IAAS;IACtC,IAAIO,aAAa,GAAQ;MACvB1B,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,EAAE;MACXuB,KAAK,EAAE;KACR;IAED,IAAI,CAACN,WAAW,CAACC,IAAI,CAAC,CAACQ,SAAS,CAAC;MAC/BC,IAAI,EAAGC,GAAQ,IAAI;QACjBH,aAAa,GAAGG,GAAG;QACnBnB,IAAI,CAACc,KAAK,GAAGK,GAAG,CAACL,KAAK;QAEtB,IAAId,IAAI,CAACc,KAAK,IAAI,IAAI,EACpB,OAAO,IAAI,CAAC7B,IAAI,CAAC4B,IAAI,CAAChC,IAAI,CAACe,QAAQ,CAACwB,eAAe,EAAEpB,IAAI,EAAE;UAC3DF,OAAO,EAAE,IAAI,CAACA;SACf,CAAC;MACJ,CAAC;MACDuB,KAAK,EAAGC,GAAQ,IAAI;QAClB,IAAI,CAACnC,aAAa,CAACoC,WAAW,CAACD,GAAG,CAAC;QACnC,OAAO,IAAI;MACb;KACD,CAAC;EAEJ;EAEAE,oBAAoB,CAACC,KAAa;IAChC,OAAO,IAAI,CAACxC,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAAC4B,oBAAoB,GAAGC,KAAK,EAAE;MAC/D3B,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;;AArEWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA2C,SAAf3C,eAAe;EAAA4C,YAFd;AAAM","names":["Apis","HttpHeaders","PropertyService","constructor","http","toastr","helperService","authorization","getToken","status","message","localStorage","getItem","getProperties","get","property","getAllProperties","headers","getPropertiesByFilter","data","uri","city","bed","bath","garage","min","max","uploadImage","file","formData","FormData","append","post","image","uploadProperty","imageResponse","subscribe","next","res","uploadPropertie","error","err","handelError","getPropertiesByEmail","email","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from './../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HelperService } from './helper.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private helperService: HelperService\n  ) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getProperties(): any {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByFilter(data: any): any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers,\n    });\n  }\n\n  uploadImage(file: File): any {\n    var formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(Apis.image.uploadImage, formData);\n  }\n\n  uploadProperty(data: property, file: any): any {\n    var imageResponse: any = {\n      status: '',\n      message: '',\n      image: '',\n    };\n\n    this.uploadImage(file).subscribe({\n      next: (res: any) => {\n        imageResponse = res\n        data.image = res.image;\n\n        if (data.image != null)\n          return this.http.post(Apis.property.uploadPropertie, data, {\n          headers: this.headers,\n        });\n      },\n      error: (err: any) => {\n        this.helperService.handelError(err);\n        return null;\n      },\n    });\n\n  }\n\n  getPropertiesByEmail(email: string): any {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}