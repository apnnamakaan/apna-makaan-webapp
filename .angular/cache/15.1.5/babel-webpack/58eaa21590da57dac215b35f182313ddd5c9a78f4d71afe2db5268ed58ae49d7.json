{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { GlobalData } from '../../shared/utils/data';\nlet DiscoverComponent = class DiscoverComponent {\n  constructor(authService, activatedroute, router, propertyService, PropertyService) {\n    this.authService = authService;\n    this.activatedroute = activatedroute;\n    this.router = router;\n    this.propertyService = propertyService;\n    this.houseList = [];\n    this.data = GlobalData;\n    this.filterData = {\n      bed: 0,\n      garage: 0,\n      bath: 0,\n      city: '',\n      min: 0,\n      max: 0\n    };\n    this.filterUrl = '/' + `?city=${this.filterData.city}&bed=${this.filterData.bed}&bath=${this.filterData.bath}&garage=${this.filterData.garage}&min=${this.filterData.min}&max=${this.filterData.max}`;\n    this.authService.checkIsLogedIn();\n  }\n  ngOnInit() {\n    this.activatedroute.queryParams.subscribe(params => {\n      this.setFilter(params);\n    });\n  }\n  setFilter(uriData) {\n    this.setCity(uriData.city);\n    this.setBed(uriData.bed);\n    this.setBath(uriData.bath);\n    this.setGarage(uriData.garage);\n    this.setMinPrice(uriData.min);\n    this.setMaxPrice(uriData.max);\n  }\n  setCity(value) {\n    this.filterData.city = value;\n  }\n  setBed(value) {\n    this.filterData.bed = value;\n  }\n  setBath(value) {\n    this.filterData.bath = value;\n  }\n  setGarage(value) {\n    this.filterData.garage = value;\n  }\n  setMaxPrice(value) {\n    this.filterData.max = value;\n  }\n  setMinPrice(value) {\n    this.filterData.min = value;\n  }\n  searchButtonPress() {\n    this.router.navigateByUrl(this.filterUrl);\n  }\n};\nDiscoverComponent = __decorate([Component({\n  selector: 'app-discover',\n  templateUrl: './discover.component.html',\n  styles: []\n})], DiscoverComponent);\nexport { DiscoverComponent };","map":{"version":3,"mappings":";AAGA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,UAAU,QAAQ,yBAAyB;AAO7C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAa5BC,YACUC,WAAwB,EACxBC,cAA8B,EAC9BC,MAAc,EACdC,eAAe,EAACC,eAAe;IAH/B,gBAAW,GAAXJ,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IACN,oBAAe,GAAfC,eAAe;IAhBzB,cAAS,GAAe,EAAE;IAC1B,SAAI,GAAQN,UAAU;IAEf,eAAU,GAAQ;MACvBQ,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE,CAAC;MACTC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE;KACN;IA6CM,cAAS,GAAU,GAAG,GAC7B,SAAS,IAAI,CAACC,UAAU,CAACH,IAAI,QAAQ,IAAI,CAACG,UAAU,CAACN,GAAG,SAAS,IAAI,CAACM,UAAU,CAACJ,IAAI,WAAW,IAAI,CAACI,UAAU,CAACL,MAAM,QAAQ,IAAI,CAACK,UAAU,CAACF,GAAG,QAAQ,IAAI,CAACE,UAAU,CAACD,GAAG,EAAE;IAtC5K,IAAI,CAACV,WAAW,CAACY,cAAc,EAAE;EACnC;EAEAC,QAAQ;IACN,IAAI,CAACZ,cAAc,CAACa,WAAW,CAACC,SAAS,CAAEC,MAAM,IAAI;MACnD,IAAI,CAACC,SAAS,CAACD,MAAM,CAAC;IACxB,CAAC,CAAC;EACJ;EAEAC,SAAS,CAACC,OAAY;IACpB,IAAI,CAACC,OAAO,CAACD,OAAO,CAACV,IAAI,CAAC;IAC1B,IAAI,CAACY,MAAM,CAACF,OAAO,CAACb,GAAG,CAAC;IACxB,IAAI,CAACgB,OAAO,CAACH,OAAO,CAACX,IAAI,CAAC;IAC1B,IAAI,CAACe,SAAS,CAACJ,OAAO,CAACZ,MAAM,CAAC;IAC9B,IAAI,CAACiB,WAAW,CAACL,OAAO,CAACT,GAAG,CAAC;IAC7B,IAAI,CAACe,WAAW,CAACN,OAAO,CAACR,GAAG,CAAC;EAC/B;EAEAS,OAAO,CAACM,KAAU;IAChB,IAAI,CAACd,UAAU,CAACH,IAAI,GAAGiB,KAAK;EAC9B;EACAL,MAAM,CAACK,KAAU;IACf,IAAI,CAACd,UAAU,CAACN,GAAG,GAAGoB,KAAK;EAC7B;EACAJ,OAAO,CAACI,KAAU;IAChB,IAAI,CAACd,UAAU,CAACJ,IAAI,GAAGkB,KAAK;EAC9B;EACAH,SAAS,CAACG,KAAU;IAClB,IAAI,CAACd,UAAU,CAACL,MAAM,GAAGmB,KAAK;EAChC;EACAD,WAAW,CAACC,KAAU;IACpB,IAAI,CAACd,UAAU,CAACD,GAAG,GAAGe,KAAK;EAC7B;EACAF,WAAW,CAACE,KAAU;IACpB,IAAI,CAACd,UAAU,CAACF,GAAG,GAAGgB,KAAK;EAC7B;EAKAC,iBAAiB;IACf,IAAI,CAACxB,MAAM,CAACyB,aAAa,CAAC,IAAI,CAACC,SAAS,CAAC;EAC3C;CACD;AA9DY9B,iBAAiB,eAL7BF,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,MAAM,EAAE;CACT,CAAC,GACWjC,iBAAiB,CA8D7B;SA9DYA,iBAAiB","names":["Component","GlobalData","DiscoverComponent","constructor","authService","activatedroute","router","propertyService","PropertyService","bed","garage","bath","city","min","max","filterData","checkIsLogedIn","ngOnInit","queryParams","subscribe","params","setFilter","uriData","setCity","setBed","setBath","setGarage","setMinPrice","setMaxPrice","value","searchButtonPress","navigateByUrl","filterUrl","selector","templateUrl","styles"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\pages\\discover\\discover.component.ts"],"sourcesContent":["import { property } from './../../shared/models/property';\nimport { HouseService } from '../../shared/services/property.service';\nimport { AuthService } from './../../shared/services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GlobalData } from '../../shared/utils/data';\n\n@Component({\n  selector: 'app-discover',\n  templateUrl: './discover.component.html',\n  styles: [],\n})\nexport class DiscoverComponent implements OnInit {\n  houseList: Array<any> = [];\n  data: any = GlobalData;\n\n  public filterData: any = {\n    bed: 0,\n    garage: 0,\n    bath: 0,\n    city: '',\n    min: 0,\n    max: 0,\n  };\n\n  constructor(\n    private authService: AuthService,\n    private activatedroute: ActivatedRoute,\n    private router: Router\n    private propertyService PropertyService\n  ) {\n    this.authService.checkIsLogedIn();\n  }\n\n  ngOnInit(): void {\n    this.activatedroute.queryParams.subscribe((params) => {\n      this.setFilter(params);\n    });\n  }\n\n  setFilter(uriData: any) {\n    this.setCity(uriData.city);\n    this.setBed(uriData.bed);\n    this.setBath(uriData.bath);\n    this.setGarage(uriData.garage);\n    this.setMinPrice(uriData.min);\n    this.setMaxPrice(uriData.max);\n  }\n\n  setCity(value: any) {\n    this.filterData.city = value;\n  }\n  setBed(value: any) {\n    this.filterData.bed = value;\n  }\n  setBath(value: any) {\n    this.filterData.bath = value;\n  }\n  setGarage(value: any) {\n    this.filterData.garage = value;\n  }\n  setMaxPrice(value: any) {\n    this.filterData.max = value;\n  }\n  setMinPrice(value: any) {\n    this.filterData.min = value;\n  }\n\n  public filterUrl:string = '/' +\n  `?city=${this.filterData.city}&bed=${this.filterData.bed}&bath=${this.filterData.bath}&garage=${this.filterData.garage}&min=${this.filterData.min}&max=${this.filterData.max}`;\n\n  searchButtonPress() {\n    this.router.navigateByUrl(this.filterUrl);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}