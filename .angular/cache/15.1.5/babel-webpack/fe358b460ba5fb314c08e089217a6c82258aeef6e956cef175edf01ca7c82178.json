{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class PropertyService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.properties = [];\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getAllProperties() {\n    this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        console.log(res);\n        this.properties = res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n  getPropertiesByFilter(filterUrl) {\n    this.http.get(Apis.property.getPropertiesByFilter + filterUrl, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        console.log(res);\n        this.properties = res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAM9D,OAAM,MAAOC,eAAe;EAQ1BC,YAAoBC,IAAgB,EAAUC,YAA0B;IAApD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAPnD,eAAU,GAAoB,EAAE;IAEhC,YAAO,GAAQ,IAAIJ,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDK,aAAa,EAAE,IAAI,CAACC,QAAQ;KAC7B,CAAC;EAEyE;EAE3EA,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAC,gBAAgB;IACd,IAAI,CAACN,IAAI,CACNO,GAAG,CAACX,IAAI,CAACY,QAAQ,CAACF,gBAAgB,EAAE;MACnCG,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAI,CAACG,UAAU,GAAGH,GAAsB;MAC1C,CAAC;MACDI,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACf,YAAY,CAACgB,WAAW,CAACD,KAAK,CAAC;MACtC;KACD,CAAC;EACN;EAEAE,qBAAqB,CAACC,SAAiB;IACrC,IAAI,CAACnB,IAAI,CACNO,GAAG,CAACX,IAAI,CAACY,QAAQ,CAACU,qBAAqB,GAAGC,SAAS,EAAE;MACpDV,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAI,CAACG,UAAU,GAAGH,GAAsB;MAC1C,CAAC;MACDI,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACf,YAAY,CAACgB,WAAW,CAACD,KAAK,CAAC;MACtC;KACD,CAAC;EACN;;AA5CWlB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAsB,SAAftB,eAAe;EAAAuB,YAFd;AAAM","names":["Apis","HttpHeaders","PropertyService","constructor","http","errorService","authorization","getToken","localStorage","getItem","getAllProperties","get","property","headers","subscribe","next","res","console","log","properties","error","handelError","getPropertiesByFilter","filterUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from '../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorService } from './error.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public properties: Array<property> = [];\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  constructor(private http: HttpClient, private errorService: ErrorService) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getAllProperties() {\n    this.http\n      .get(Apis.property.getAllProperties, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.properties = res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  getPropertiesByFilter(filterUrl: string) {\n    this.http\n      .get(Apis.property.getPropertiesByFilter + filterUrl, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.properties = res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}