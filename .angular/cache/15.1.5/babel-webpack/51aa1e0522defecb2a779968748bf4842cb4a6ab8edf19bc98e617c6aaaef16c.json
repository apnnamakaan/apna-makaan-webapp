{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport class UserService {\n  constructor(authSevices, http, toastr, router) {\n    this.authSevices = authSevices;\n    this.http = http;\n    this.toastr = toastr;\n    this.router = router;\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.verifyResponse = {\n      email: ''\n    };\n    this.userData = {\n      name: '',\n      phone: 0,\n      email: '',\n      password: ''\n    };\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    if (authSevices.isLogedin) this.getUser();\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getUser() {\n    this.http.get(Apis.user.getUserByToken, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.userData = res;\n      },\n      error: error => {\n        if (error.status == 401) {\n          this.authSevices.logout();\n          return;\n        }\n        if (error.status == 500) {\n          this.router.navigateByUrl('/error');\n          return;\n        }\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n  updateUser(userData) {\n    this.http.put(Apis.user.updateUserByEmail + userData.email, userData, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.getUser();\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      },\n      error: error => {\n        if (error.status == 500) {\n          this.toastr.info('service unable', '', {\n            progressBar: true\n          });\n          return;\n        }\n        if (error.status == 401) this.authSevices.logout();\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.Router));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;;;;AAO9D,OAAM,MAAOC,WAAW;EAsBtBC,YACUC,WAAwB,EACxBC,IAAgB,EAChBC,MAAqB,EACrBC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAzBT,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;IAEM,mBAAc,GAAQ;MAC3BC,KAAK,EAAE;KACR;IAEM,aAAQ,GAAS;MACtBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,CAAC;MACRF,KAAK,EAAE,EAAE;MACTG,QAAQ,EAAE;KACX;IAEM,YAAO,GAAQ,IAAIZ,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDa,aAAa,EAAE,IAAI,CAACC,QAAQ;KAC7B,CAAC;IAQA,IAAIX,WAAW,CAACY,SAAS,EAAE,IAAI,CAACC,OAAO,EAAE;EAC3C;EAEAF,QAAQ;IACN,OAAOG,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAF,OAAO;IACL,IAAI,CAACZ,IAAI,CACNe,GAAG,CAACpB,IAAI,CAACqB,IAAI,CAACC,cAAc,EAAE;MAC7BC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,QAAQ,GAAGD,GAAW;MAC7B,CAAC;MACDE,KAAK,EAAGA,KAAK,IAAI;QACf,IAAIA,KAAK,CAACpB,MAAM,IAAI,GAAG,EAAE;UACvB,IAAI,CAACJ,WAAW,CAACyB,MAAM,EAAE;UACzB;;QAGF,IAAID,KAAK,CAACpB,MAAM,IAAI,GAAG,EAAE;UACvB,IAAI,CAACD,MAAM,CAACuB,aAAa,CAAC,QAAQ,CAAC;UACnC;;QAEF,IAAI,CAACC,WAAW,GAAGH,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACtB,MAAM,CAAC0B,OAAO,CAAC,IAAI,CAACD,WAAW,CAACtB,OAAO,EAAE,EAAE,EAAE;UAChDwB,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACN;EAEAC,UAAU,CAACP,QAAc;IACvB,IAAI,CAACtB,IAAI,CACN8B,GAAG,CAACnC,IAAI,CAACqB,IAAI,CAACe,iBAAiB,GAAGT,QAAQ,CAACjB,KAAK,EAAEiB,QAAQ,EAAE;MAC3DJ,OAAO,EAAE,IAAI,CAACA;KACf,CAAC,CACDC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACK,WAAW,GAAGL,GAAG;QACtB,IAAI,CAACT,OAAO,EAAE;QACd,IAAI,CAACX,MAAM,CAAC+B,OAAO,CAAC,IAAI,CAACN,WAAW,CAACtB,OAAO,EAAE,EAAE,EAAE;UAChDwB,WAAW,EAAE;SACd,CAAC;MACJ,CAAC;MACDL,KAAK,EAAGA,KAAK,IAAI;QACf,IAAIA,KAAK,CAACpB,MAAM,IAAI,GAAG,EAAE;UACvB,IAAI,CAACF,MAAM,CAACgC,IAAI,CAAC,gBAAgB,EAAE,EAAE,EAAE;YACrCL,WAAW,EAAE;WACd,CAAC;UACF;;QAGF,IAAIL,KAAK,CAACpB,MAAM,IAAI,GAAG,EAAE,IAAI,CAACJ,WAAW,CAACyB,MAAM,EAAE;QAElD,IAAI,CAACE,WAAW,GAAGH,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACtB,MAAM,CAAC0B,OAAO,CAAC,IAAI,CAACD,WAAW,CAACtB,OAAO,EAAE,EAAE,EAAE;UAChDwB,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACN;;AA3FW/B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqC,SAAXrC,WAAW;EAAAsC,YAFV;AAAM","names":["Apis","HttpHeaders","UserService","constructor","authSevices","http","toastr","router","status","message","email","name","phone","password","authorization","getToken","isLogedin","getUser","localStorage","getItem","get","user","getUserByToken","headers","subscribe","next","res","userData","error","logout","navigateByUrl","apiResponse","warning","progressBar","updateUser","put","updateUserByEmail","success","info","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { user } from './../models/user';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  public verifyResponse: any = {\n    email: '',\n  };\n\n  public userData: user = {\n    name: '',\n    phone: 0,\n    email: '',\n    password: '',\n  };\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  constructor(\n    private authSevices: AuthService,\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private router: Router\n  ) {\n    if (authSevices.isLogedin) this.getUser();\n  }\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getUser() {\n    this.http\n      .get(Apis.user.getUserByToken, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.userData = res as user;\n        },\n        error: (error) => {\n          if (error.status == 401) {\n            this.authSevices.logout();\n            return;\n          }\n\n          if (error.status == 500) {\n            this.router.navigateByUrl('/error');\n            return;\n          }\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n      });\n  }\n\n  updateUser(userData: user) {\n    this.http\n      .put(Apis.user.updateUserByEmail + userData.email, userData, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.apiResponse = res;\n          this.getUser();\n          this.toastr.success(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n        error: (error) => {\n          if (error.status == 500) {\n            this.toastr.info('service unable', '', {\n              progressBar: true,\n            });\n            return;\n          }\n\n          if (error.status == 401) this.authSevices.logout();\n\n          this.apiResponse = error.error;\n          this.toastr.warning(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}