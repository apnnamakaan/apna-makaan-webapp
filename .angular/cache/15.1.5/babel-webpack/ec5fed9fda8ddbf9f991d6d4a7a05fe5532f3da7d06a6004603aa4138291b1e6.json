{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport class DatePipe {\n  transform(value, ...args) {\n    var today = new Date();\n    var diffDays = new Date(value).getTime() - new Date(today).getTime();\n    console.log(diffDays / 24 * 60 * 60 * 1000);\n    return value;\n  }\n  timeAgo(dateParam) {\n    if (!dateParam) {\n      return null;\n    }\n    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);\n    const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000\n    const today = new Date();\n    const yesterday = new Date(today - DAY_IN_MS);\n    const seconds = Math.round((today - date) / 1000);\n    const minutes = Math.round(seconds / 60);\n    const isToday = today.toDateString() === date.toDateString();\n    const isYesterday = yesterday.toDateString() === date.toDateString();\n    const isThisYear = today.getFullYear() === date.getFullYear();\n    if (seconds < 5) {\n      return 'now';\n    } else if (seconds < 60) {\n      return `${seconds} seconds ago`;\n    } else if (seconds < 90) {\n      return 'about a minute ago';\n    } else if (minutes < 60) {\n      return `${minutes} minutes ago`;\n    } else if (isToday) {\n      return getFormattedDate(date, 'Today'); // Today at 10:20\n    } else if (isYesterday) {\n      return getFormattedDate(date, 'Yesterday'); // Yesterday at 10:20\n    } else if (isThisYear) {\n      return getFormattedDate(date, false, true); // 10. January at 10:20\n    }\n\n    return getFormattedDate(date); // 10. January 2017. at 10:20\n  }\n\n  getFormattedDate(date, prefomattedDate = false, hideYear = false) {\n    const day = date.getDate();\n    const month = MONTH_NAMES[date.getMonth()];\n    const year = date.getFullYear();\n    const hours = date.getHours();\n    let minutes = date.getMinutes();\n    if (minutes < 10) {\n      // Adding leading zero to minutes\n      minutes = `0${minutes}`;\n    }\n    if (prefomattedDate) {\n      // Today at 10:20\n      // Yesterday at 10:20\n      return `${prefomattedDate} at ${hours}:${minutes}`;\n    }\n    if (hideYear) {\n      // 10. January at 10:20\n      return `${day}. ${month} at ${hours}:${minutes}`;\n    }\n    // 10. January 2017. at 10:20\n    return `${day}. ${month} ${year}. at ${hours}:${minutes}`;\n  }\n}\nDatePipe.ɵfac = function DatePipe_Factory(t) {\n  return new (t || DatePipe)();\n};\nDatePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"date\",\n  type: DatePipe,\n  pure: true\n});","map":{"version":3,"mappings":"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","names":["MONTH_NAMES","DatePipe","transform","value","args","today","Date","diffDays","getTime","console","log","timeAgo","dateParam","date","DAY_IN_MS","yesterday","seconds","Math","round","minutes","isToday","toDateString","isYesterday","isThisYear","getFullYear","getFormattedDate","prefomattedDate","hideYear","day","getDate","month","getMonth","year","hours","getHours","getMinutes","pure"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\pipes\\date.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\nconst MONTH_NAMES = [\n  'January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December'\n];\n\n\n\n@Pipe({\n  name: 'date',\n})\nexport class DatePipe implements PipeTransform {\n  transform(value: any, ...args: unknown[]): unknown {\n    var today: Date = new Date();\n\n    var diffDays = new Date(value).getTime() - new Date(today).getTime();\n    console.log((diffDays / 24) * 60 * 60 * 1000);\n    return value;\n  }\n  \n  timeAgo(dateParam) {\n    if (!dateParam) {\n      return null;\n    }\n  \n    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);\n    const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000\n    const today = new Date();\n    const yesterday = new Date(today - DAY_IN_MS);\n    const seconds = Math.round((today - date) / 1000);\n    const minutes = Math.round(seconds / 60);\n    const isToday = today.toDateString() === date.toDateString();\n    const isYesterday = yesterday.toDateString() === date.toDateString();\n    const isThisYear = today.getFullYear() === date.getFullYear();\n  \n  \n    if (seconds < 5) {\n      return 'now';\n    } else if (seconds < 60) {\n      return `${ seconds } seconds ago`;\n    } else if (seconds < 90) {\n      return 'about a minute ago';\n    } else if (minutes < 60) {\n      return `${ minutes } minutes ago`;\n    } else if (isToday) {\n      return getFormattedDate(date, 'Today'); // Today at 10:20\n    } else if (isYesterday) {\n      return getFormattedDate(date, 'Yesterday'); // Yesterday at 10:20\n    } else if (isThisYear) {\n      return getFormattedDate(date, false, true); // 10. January at 10:20\n    }\n  \n    return getFormattedDate(date); // 10. January 2017. at 10:20\n  }\n\n   getFormattedDate(date:, prefomattedDate = false, hideYear = false) {\n    const day = date.getDate();\n    const month = MONTH_NAMES[date.getMonth()];\n    const year = date.getFullYear();\n    const hours = date.getHours();\n    let minutes = date.getMinutes();\n  \n    if (minutes < 10) {\n      // Adding leading zero to minutes\n      minutes = `0${ minutes }`;\n    }\n  \n    if (prefomattedDate) {\n      // Today at 10:20\n      // Yesterday at 10:20\n      return `${ prefomattedDate } at ${ hours }:${ minutes }`;\n    }\n  \n    if (hideYear) {\n      // 10. January at 10:20\n      return `${ day }. ${ month } at ${ hours }:${ minutes }`;\n    }\n  \n    // 10. January 2017. at 10:20\n    return `${ day }. ${ month } ${ year }. at ${ hours }:${ minutes }`;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}