{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./error.service\";\nexport class PropertyService {\n  constructor(http, toastr, errorService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.errorService = errorService;\n    this.properties = [];\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getAllProperties() {\n    this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.properties = res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.ErrorService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});\nany;\n{\n  var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n  this.http.get(Apis.property.getPropertiesByFilter + uri, {\n    headers: this.headers\n  }).subscribe({\n    next: res => {\n      this.properties = res;\n    },\n    error: error => {\n      this.errorService.handelError(error);\n    }\n  });\n}\nuploadProperty(data, any);\n{\n  console.log(data);\n  this.http.post(Apis.property.uploadPropertie, data, {\n    headers: this.headers\n  }).subscribe({\n    next: res => {\n      this.apiResponse = res;\n      this.toastr.success(this.apiResponse.message, '', {\n        progressBar: true\n      });\n    },\n    error: error => {\n      this.errorService.handelError(error);\n    }\n  });\n}\ngetPropertiesByEmail(email, string);\nany;\n{\n  this.http.get(Apis.property.getPropertiesByEmail + email, {\n    headers: this.headers\n  }).subscribe({\n    next: res => {\n      return res;\n    },\n    error: error => {\n      this.errorService.handelError(error);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["Apis","HttpHeaders","PropertyService","constructor","http","toastr","errorService","authorization","getToken","status","message","localStorage","getItem","getAllProperties","get","property","headers","subscribe","next","res","properties","error","handelError","factory","providedIn","any","uri","data","city","bed","bath","garage","min","max","getPropertiesByFilter","uploadProperty","console","log","post","uploadPropertie","apiResponse","success","progressBar","getPropertiesByEmail","email","string"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { UserService } from 'src/app/shared/services/user.service';\nimport { property } from '../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorService } from './error.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public properties: Array<property> = [];\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private errorService: ErrorService\n  ) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getAllProperties() {\n    this.http\n      .get(Apis.property.getAllProperties, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.properties = res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  getPropertiesByFilter(data: any) any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    this.http\n      .get(Apis.property.getPropertiesByFilter + uri, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.properties = res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  uploadProperty(data: any) {\n    console.log(data);\n\n    this.http\n      .post(Apis.property.uploadPropertie, data, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.apiResponse = res;\n          this.toastr.success(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  getPropertiesByEmail(email: string): any{\n    this.http\n      .get(Apis.property.getPropertiesByEmail + email, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          return res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}