{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nlet PropertyService = class PropertyService {\n  constructor(http, toastr, errorService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.errorService = errorService;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getProperties() {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByFilter(data) {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers\n    });\n  }\n  uploadProperty(data) {\n    return this.http.post(Apis.property.uploadPropertie, data, {\n      headers: this.headers\n    });\n  }\n  getPropertiesByEmail(email) {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers\n    });\n  }\n};\nPropertyService = __decorate([Injectable({\n  providedIn: 'root'\n})], PropertyService);\nexport { PropertyService };","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;AAOvD,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAW1BC,YACUC,IAAgB,EAChBC,MAAqB,EACrBC,YAA0B;IAF1B,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IAbf,YAAO,GAAQ,IAAIL,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDM,aAAa,EAAE,IAAI,CAACC,QAAQ;KAC7B,CAAC;IAEK,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;EAME;EAEHF,QAAQ;IACN,OAAOG,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEAC,aAAa;IACX,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAACC,gBAAgB,EAAE;MACnDC,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAC,qBAAqB,CAACC,IAAS;IAC7B,IAAIC,GAAG,GAAG,SAASD,IAAI,CAACE,IAAI,QAAQF,IAAI,CAACG,GAAG,SAASH,IAAI,CAACI,IAAI,WAAWJ,IAAI,CAACK,MAAM,QAAQL,IAAI,CAACM,GAAG,QAAQN,IAAI,CAACO,GAAG,EAAE;IACtH,OAAO,IAAI,CAACtB,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAACG,qBAAqB,GAAGE,GAAG,EAAE;MAC9DH,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAU,cAAc,CAACR,IAAS;IACtB,OAAO,IAAI,CAACf,IAAI,CAACwB,IAAI,CAAC5B,IAAI,CAACe,QAAQ,CAACc,eAAe,EAAEV,IAAI,EAAE;MACzDF,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;EAEAa,oBAAoB,CAACC,KAAa;IAChC,OAAO,IAAI,CAAC3B,IAAI,CAACU,GAAG,CAACd,IAAI,CAACe,QAAQ,CAACe,oBAAoB,GAAGC,KAAK,EAAE;MAC/Dd,OAAO,EAAE,IAAI,CAACA;KACf,CAAC;EACJ;CACD;AA7CYf,eAAe,eAH3BH,UAAU,CAAC;EACViC,UAAU,EAAE;CACb,CAAC,GACW9B,eAAe,CA6C3B;SA7CYA,eAAe","names":["Injectable","Apis","HttpHeaders","PropertyService","constructor","http","toastr","errorService","authorization","getToken","status","message","localStorage","getItem","getProperties","get","property","getAllProperties","headers","getPropertiesByFilter","data","uri","city","bed","bath","garage","min","max","uploadProperty","post","uploadPropertie","getPropertiesByEmail","email","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from './../models/property';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorService } from './helper.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private errorService: ErrorService\n  ) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n\n  getProperties(): any {\n    return this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByFilter(data: any): any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    return this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers,\n    });\n  }\n\n  uploadProperty(data: any): any {\n    return this.http.post(Apis.property.uploadPropertie, data, {\n      headers: this.headers,\n    });\n  }\n\n  getPropertiesByEmail(email: string): any {\n    return this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}