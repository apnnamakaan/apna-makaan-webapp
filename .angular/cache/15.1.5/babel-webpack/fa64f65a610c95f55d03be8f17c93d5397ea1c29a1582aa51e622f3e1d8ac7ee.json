{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { GlobalData } from '../../shared/utils/data';\nlet DiscoverComponent = class DiscoverComponent {\n  constructor(authService, activatedroute, router, propertyService) {\n    this.authService = authService;\n    this.activatedroute = activatedroute;\n    this.router = router;\n    this.propertyService = propertyService;\n    this.properties = [];\n    this.data = GlobalData;\n    this.filterData = {\n      bed: 0,\n      garage: 0,\n      bath: 0,\n      city: '',\n      min: 0,\n      max: 0\n    };\n    this.filterUrl = `?city=${this.filterData.city}&bed=${this.filterData.bed}&bath=${this.filterData.bath}&garage=${this.filterData.garage}&min=${this.filterData.min}&max=${this.filterData.max}`;\n    this.authService.checkIsLogedIn();\n  }\n  ngOnInit() {\n    this.activatedroute.queryParams.subscribe(params => {\n      this.setFilter(params);\n    });\n    this.propertyService.getProperties(this.filterUrl);\n    this.properties = this.propertyService.properties;\n  }\n  setFilter(uriData) {\n    this.setCity(uriData.city);\n    this.setBed(uriData.bed);\n    this.setBath(uriData.bath);\n    this.setGarage(uriData.garage);\n    this.setMinPrice(uriData.min);\n    this.setMaxPrice(uriData.max);\n  }\n  setCity(value) {\n    this.filterData.city = value;\n  }\n  setBed(value) {\n    this.filterData.bed = value;\n  }\n  setBath(value) {\n    this.filterData.bath = value;\n  }\n  setGarage(value) {\n    this.filterData.garage = value;\n  }\n  setMaxPrice(value) {\n    this.filterData.max = value;\n  }\n  setMinPrice(value) {\n    this.filterData.min = value;\n  }\n  searchButtonPress() {\n    this.router.navigateByUrl(this.filterUrl);\n  }\n};\nDiscoverComponent = __decorate([Component({\n  selector: 'app-discover',\n  templateUrl: './discover.component.html',\n  styles: []\n})], DiscoverComponent);\nexport { DiscoverComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,UAAU,QAAQ,yBAAyB;AAQ7C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAe5BC,YACUC,WAAwB,EACxBC,cAA8B,EAC9BC,MAAc,EACdC,eAAgC;IAHhC,gBAAW,GAAXH,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IACN,oBAAe,GAAfC,eAAe;IAlBlB,eAAU,GAAoB,EAAE;IACvC,SAAI,GAAQN,UAAU;IAEf,eAAU,GAAQ;MACvBO,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE,CAAC;MACTC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE;KACN;IAEM,cAAS,GAAW,SAAS,IAAI,CAACC,UAAU,CAACH,IAAI,QAAQ,IAAI,CAACG,UAAU,CAACN,GAAG,SAAS,IAAI,CAACM,UAAU,CAACJ,IAAI,WAAW,IAAI,CAACI,UAAU,CAACL,MAAM,QAAQ,IAAI,CAACK,UAAU,CAACF,GAAG,QAAQ,IAAI,CAACE,UAAU,CAACD,GAAG,EAAE;IAQvM,IAAI,CAACT,WAAW,CAACW,cAAc,EAAE;EACnC;EAEAC,QAAQ;IACN,IAAI,CAACX,cAAc,CAACY,WAAW,CAACC,SAAS,CAAEC,MAAM,IAAI;MACnD,IAAI,CAACC,SAAS,CAACD,MAAM,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI,CAACZ,eAAe,CAACc,aAAa,CAAC,IAAI,CAACC,SAAS,CAAC;IAClD,IAAI,CAACC,UAAU,GAAG,IAAI,CAAChB,eAAe,CAACgB,UAAU;EACnD;EAEAH,SAAS,CAACI,OAAY;IACpB,IAAI,CAACC,OAAO,CAACD,OAAO,CAACb,IAAI,CAAC;IAC1B,IAAI,CAACe,MAAM,CAACF,OAAO,CAAChB,GAAG,CAAC;IACxB,IAAI,CAACmB,OAAO,CAACH,OAAO,CAACd,IAAI,CAAC;IAC1B,IAAI,CAACkB,SAAS,CAACJ,OAAO,CAACf,MAAM,CAAC;IAC9B,IAAI,CAACoB,WAAW,CAACL,OAAO,CAACZ,GAAG,CAAC;IAC7B,IAAI,CAACkB,WAAW,CAACN,OAAO,CAACX,GAAG,CAAC;EAC/B;EAEAY,OAAO,CAACM,KAAU;IAChB,IAAI,CAACjB,UAAU,CAACH,IAAI,GAAGoB,KAAK;EAC9B;EACAL,MAAM,CAACK,KAAU;IACf,IAAI,CAACjB,UAAU,CAACN,GAAG,GAAGuB,KAAK;EAC7B;EACAJ,OAAO,CAACI,KAAU;IAChB,IAAI,CAACjB,UAAU,CAACJ,IAAI,GAAGqB,KAAK;EAC9B;EACAH,SAAS,CAACG,KAAU;IAClB,IAAI,CAACjB,UAAU,CAACL,MAAM,GAAGsB,KAAK;EAChC;EACAD,WAAW,CAACC,KAAU;IACpB,IAAI,CAACjB,UAAU,CAACD,GAAG,GAAGkB,KAAK;EAC7B;EACAF,WAAW,CAACE,KAAU;IACpB,IAAI,CAACjB,UAAU,CAACF,GAAG,GAAGmB,KAAK;EAC7B;EAEAC,iBAAiB;IACf,IAAI,CAAC1B,MAAM,CAAC2B,aAAa,CAAC,IAAI,CAACX,SAAS,CAAC;EAC3C;CACD;AAhEYpB,iBAAiB,eAL7BF,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,MAAM,EAAE;CACT,CAAC,GACWlC,iBAAiB,CAgE7B;SAhEYA,iBAAiB","names":["Component","GlobalData","DiscoverComponent","constructor","authService","activatedroute","router","propertyService","bed","garage","bath","city","min","max","filterData","checkIsLogedIn","ngOnInit","queryParams","subscribe","params","setFilter","getProperties","filterUrl","properties","uriData","setCity","setBed","setBath","setGarage","setMinPrice","setMaxPrice","value","searchButtonPress","navigateByUrl","selector","templateUrl","styles"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\pages\\discover\\discover.component.ts"],"sourcesContent":["import { PropertyService } from './../../shared/services/property.service';\nimport { AuthService } from './../../shared/services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GlobalData } from '../../shared/utils/data';\nimport { property } from 'src/app/shared/models/property';\n\n@Component({\n  selector: 'app-discover',\n  templateUrl: './discover.component.html',\n  styles: [],\n})\nexport class DiscoverComponent implements OnInit {\n  public properties: Array<property> = [];\n  data: any = GlobalData;\n\n  public filterData: any = {\n    bed: 0,\n    garage: 0,\n    bath: 0,\n    city: '',\n    min: 0,\n    max: 0,\n  };\n\n  public filterUrl: string = `?city=${this.filterData.city}&bed=${this.filterData.bed}&bath=${this.filterData.bath}&garage=${this.filterData.garage}&min=${this.filterData.min}&max=${this.filterData.max}`;\n\n  constructor(\n    private authService: AuthService,\n    private activatedroute: ActivatedRoute,\n    private router: Router,\n    private propertyService: PropertyService\n  ) {\n    this.authService.checkIsLogedIn();\n  }\n\n  ngOnInit(): void {\n    this.activatedroute.queryParams.subscribe((params) => {\n      this.setFilter(params);\n    });\n\n    this.propertyService.getProperties(this.filterUrl);\n    this.properties = this.propertyService.properties;\n  }\n\n  setFilter(uriData: any) {\n    this.setCity(uriData.city);\n    this.setBed(uriData.bed);\n    this.setBath(uriData.bath);\n    this.setGarage(uriData.garage);\n    this.setMinPrice(uriData.min);\n    this.setMaxPrice(uriData.max);\n  }\n\n  setCity(value: any) {\n    this.filterData.city = value;\n  }\n  setBed(value: any) {\n    this.filterData.bed = value;\n  }\n  setBath(value: any) {\n    this.filterData.bath = value;\n  }\n  setGarage(value: any) {\n    this.filterData.garage = value;\n  }\n  setMaxPrice(value: any) {\n    this.filterData.max = value;\n  }\n  setMinPrice(value: any) {\n    this.filterData.min = value;\n  }\n\n  searchButtonPress() {\n    this.router.navigateByUrl(this.filterUrl);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}