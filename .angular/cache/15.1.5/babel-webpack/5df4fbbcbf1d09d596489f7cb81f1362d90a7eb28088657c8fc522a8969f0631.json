{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Apis } from '../utils/apis';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, toastr, router) {\n    this.http = http;\n    this.toastr = toastr;\n    this.router = router;\n    this.isLogedin = false;\n    this.tokenRes = {\n      token: ''\n    };\n    this.apiResponse = {};\n    this.token = '';\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: this.token\n    });\n    this.checkIsLogedIn();\n  }\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigate(['/login']);\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n      this.router.navigate(['']);\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n  signup(userData) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: res => {\n        this.toastr.warning(error.error.message, '', {\n          progressBar: true\n        });\n        this.checkIsLogedIn();\n      },\n      error: error => {\n        this.toastr.warning(error.error.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n  login(userData) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: res => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + this.tokenRes.token);\n        this.checkIsLogedIn();\n      },\n      error: error => {\n        this.toastr.warning(error.error.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAEEA,WAAW,QAGN,sBAAsB;AAE7B,SAASC,IAAI,QAAQ,eAAe;;;;;AAOpC,OAAM,MAAOC,WAAW;EAatBC,YACUC,IAAgB,EAChBC,MAAqB,EACrBC,MAAc;IAFd,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAfT,cAAS,GAAY,KAAK;IAEzB,aAAQ,GAAQ;MAAEC,KAAK,EAAE;IAAE,CAAE;IAC7B,gBAAW,GAAO,EAAE;IAEpB,UAAK,GAAW,EAAE;IAEnB,YAAO,GAAQ,IAAIP,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDQ,aAAa,EAAE,IAAI,CAACD;KACrB,CAAC;IAOA,IAAI,CAACE,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAElC,IAAIH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,IAAI;MACrB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;EAE9B;EAEAC,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACN,cAAc,EAAE;EACvB;EAEAO,MAAM,CAACC,QAAc;IACnB,IAAI,CAACb,IAAI,CAACc,IAAI,CAACjB,IAAI,CAACkB,KAAK,EAAEF,QAAQ,CAAC,CAACG,SAAS,CAAC;MAC7CC,IAAI,EAAGC,GAAG,IAAI;QAEZ,IAAI,CAACjB,MAAM,CAACkB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,EAAE,EAAE;UAC3CC,WAAW,EAAE;SACd,CAAC;QAEF,IAAI,CAACjB,cAAc,EAAE;MACvB,CAAC;MACDe,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACnB,MAAM,CAACkB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,EAAE,EAAE;UAC3CC,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;EAGAP,KAAK,CAACF,QAAc;IAClB,IAAI,CAACb,IAAI,CAACc,IAAI,CAACjB,IAAI,CAACkB,KAAK,EAAEF,QAAQ,CAAC,CAACG,SAAS,CAAC;MAC7CC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACK,QAAQ,GAAGL,GAAG;QACnBZ,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAE,QAAQ,GAAG,IAAI,CAACD,QAAQ,CAACpB,KAAK,CAAC;QAC7D,IAAI,CAACE,cAAc,EAAE;MACvB,CAAC;MACDe,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACnB,MAAM,CAACkB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,EAAE,EAAE;UAC3CC,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;;AArEWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["HttpHeaders","Apis","AuthService","constructor","http","toastr","router","token","Authorization","checkIsLogedIn","localStorage","getItem","isLogedin","navigate","logout","removeItem","signup","userData","post","login","subscribe","next","res","warning","error","message","progressBar","tokenRes","setItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { Router } from '@angular/router';\nimport { user } from './../models/user';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\nimport { Apis } from '../utils/apis';\nimport { GlobalData } from '../utils/data';\nimport { catchError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public isLogedin: boolean = false;\n  public userData: any;\n  private tokenRes: any = { token: '' };\n  private apiResponse:any = {};\n\n  private token: string = '';\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    Authorization: this.token,\n  });\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private router: Router\n  ) {\n    this.checkIsLogedIn();\n  }\n\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigate(['/login']);\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n      this.router.navigate(['']);\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n\n  signup(userData: user) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: (res) => {\n      \n        this.toastr.warning(error.error.message, '', {\n          progressBar: true,\n        });\n\n        this.checkIsLogedIn();\n      },\n      error: (error) => {\n        this.toastr.warning(error.error.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n\n\n  login(userData: user) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: (res) => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + this.tokenRes.token);\n        this.checkIsLogedIn();\n      },\n      error: (error) => {\n        this.toastr.warning(error.error.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}