{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport class ErrorService {\n  constructor(toastr) {\n    this.toastr = toastr;\n  }\n  showToastW(message) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right'\n    });\n  }\n  handelEmptyFilds(obj) {\n    var isEmpty = true;\n    for (var property in obj) {\n      if (typeof obj[property] === 'number') {\n        if (obj[property] < 1) {\n          isEmpty = true;\n          this.showToastW(property + ' is Empty');\n        } else {\n          isEmpty = false;\n        }\n      }\n      if (typeof obj[property] === 'string') {\n        if (obj[property].length == 0) {\n          this.showToastW(property + ' is Empty');\n        } else {\n          isEmpty = false;\n        }\n      }\n    }\n  }\n  handelError(error) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n      default:\n        {\n          this.showToastW(error.error.message);\n          break;\n        }\n    }\n  }\n}\nErrorService.ɵfac = function ErrorService_Factory(t) {\n  return new (t || ErrorService)(i0.ɵɵinject(i1.ToastrService));\n};\nErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorService,\n  factory: ErrorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,YAAY;EACvBC,YAAoBC,MAAqB;IAArB,WAAM,GAANA,MAAM;EAAkB;EAE5CC,UAAU,CAACC,OAAe;IACxB,IAAI,CAACF,MAAM,CAACG,OAAO,CAACD,OAAO,EAAE,EAAE,EAAE;MAC/BE,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE;KAChB,CAAC;EACJ;EAGAC,gBAAgB,CAACC,GAAQ;IACvB,IAAIC,OAAO,GAAG,IAAI;IAClB,KAAK,IAAIC,QAAQ,IAAIF,GAAG,EAAE;MAExB,IAAI,OAAOA,GAAG,CAACE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAGF,GAAG,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAC;UACnBD,OAAO,GAAG,IAAI;UACd,IAAI,CAACP,UAAU,CAACQ,QAAQ,GAAG,WAAW,CAAC;SACxC,MACG;UACFD,OAAO,GAAG,KAAK;;;MAInB,IAAI,OAAOD,GAAG,CAACE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAGF,GAAG,CAACE,QAAQ,CAAC,CAACC,MAAM,IAAI,CAAC,EAAC;UAC3B,IAAI,CAACT,UAAU,CAACQ,QAAQ,GAAG,WAAW,CAAC;SACxC,MACG;UACFD,OAAO,GAAG,KAAK;;;;EAIvB;EAEAG,WAAW,CAACC,KAAU;IACpB,QAAQA,KAAK,CAACC,MAAM;MAClB,KAAK,CAAC;QACJ,IAAI,CAACZ,UAAU,CAAC,oBAAoB,CAAC;QACrC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,uBAAuB,CAAC;QACxC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,aAAa,CAAC;QAC9B;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,qBAAqB,CAAC;QACtC;MAEF;QAAS;UACP,IAAI,CAACA,UAAU,CAACW,KAAK,CAACA,KAAK,CAACV,OAAO,CAAC;UACpC;;IACD;EAEL;;AA3DWJ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["ErrorService","constructor","toastr","showToastW","message","warning","progressBar","positionClass","handelEmptyFilds","obj","isEmpty","property","length","handelError","error","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\error.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService {\n  constructor(private toastr: ToastrService) {}\n\n  showToastW(message: string) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right',\n    });\n  }\n\n  \n  handelEmptyFilds(obj: any) {\n    var isEmpty = true;\n    for (var property in obj) {\n\n      if (typeof obj[property] === 'number') {\n        if(obj[property] < 1){\n          isEmpty = true;\n          this.showToastW(property + ' is Empty');\n        }\n        else{\n          isEmpty = false;\n        }\n      }\n\n      if (typeof obj[property] === 'string') {\n        if(obj[property].length == 0){\n          this.showToastW(property + ' is Empty');\n        }\n        else{\n          isEmpty = false;\n        }\n      }\n    }\n  }\n\n  handelError(error: any) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n\n      default: {\n        this.showToastW(error.error.message);\n        break;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}