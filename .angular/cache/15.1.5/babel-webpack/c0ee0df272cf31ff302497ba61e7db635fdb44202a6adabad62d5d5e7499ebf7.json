{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet ErrorService = class ErrorService {\n  constructor(toastr, pribvate, roter) {\n    this.toastr = toastr;\n  }\n  showToastW(message) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right'\n    });\n  }\n  showToastS(message) {\n    this.toastr.success(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right'\n    });\n  }\n  reloadCurrentRoute() {\n    let currentUrl = this.router.url;\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate([currentUrl]);\n    });\n  }\n  handelEmptyFilds(obj, isMessage = true) {\n    var emptyCount = 0;\n    for (var property in obj) {\n      if (typeof obj[property] === 'number') {\n        if (obj[property] < 1) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n      if (typeof obj[property] === 'string') {\n        if (obj[property].length == 0) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n    }\n    if (emptyCount != 0) return true;else return false;\n  }\n  handelError(error) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n      default:\n        {\n          this.showToastW(error.error.message);\n          break;\n        }\n    }\n  }\n};\nErrorService = __decorate([Injectable({\n  providedIn: 'root'\n})], ErrorService);\nexport { ErrorService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAMnC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EACvBC,YAAoBC,MAAqB,EAACC,QAAQ,EAACC,KAAa;IAA5C,WAAM,GAANF,MAAM;EAAyC;EAEnEG,UAAU,CAACC,OAAe;IACxB,IAAI,CAACJ,MAAM,CAACK,OAAO,CAACD,OAAO,EAAE,EAAE,EAAE;MAC/BE,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE;KAChB,CAAC;EACJ;EAEAC,UAAU,CAACJ,OAAe;IACxB,IAAI,CAACJ,MAAM,CAACS,OAAO,CAACL,OAAO,EAAE,EAAE,EAAE;MAC/BE,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE;KAChB,CAAC;EACJ;EAEEG,kBAAkB;IAClB,IAAIC,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG;IAChC,IAAI,CAACD,MAAM,CAACE,aAAa,CAAC,GAAG,EAAE;MAAEC,kBAAkB,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CAAC,MAAK;MACrE,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAACN,UAAU,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ;EAGAO,gBAAgB,CAACC,GAAQ,EAAEC,YAAqB,IAAI;IAClD,IAAIC,UAAU,GAAW,CAAC;IAE1B,KAAK,IAAIC,QAAQ,IAAIH,GAAG,EAAE;MACxB,IAAI,OAAOA,GAAG,CAACG,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAIH,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;UACrB,IAAIF,SAAS,EAAE,IAAI,CAACjB,UAAU,CAACmB,QAAQ,GAAG,WAAW,CAAC;UACtDD,UAAU,EAAE;;;MAIhB,IAAI,OAAOF,GAAG,CAACG,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAIH,GAAG,CAACG,QAAQ,CAAC,CAACC,MAAM,IAAI,CAAC,EAAE;UAC7B,IAAIH,SAAS,EAAE,IAAI,CAACjB,UAAU,CAACmB,QAAQ,GAAG,WAAW,CAAC;UACtDD,UAAU,EAAE;;;;IAKlB,IAAIA,UAAU,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC,KAC5B,OAAO,KAAK;EACnB;EAEAG,WAAW,CAACC,KAAU;IACpB,QAAQA,KAAK,CAACC,MAAM;MAClB,KAAK,CAAC;QACJ,IAAI,CAACvB,UAAU,CAAC,oBAAoB,CAAC;QACrC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,uBAAuB,CAAC;QACxC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,aAAa,CAAC;QAC9B;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,qBAAqB,CAAC;QACtC;MAEF;QAAS;UACP,IAAI,CAACA,UAAU,CAACsB,KAAK,CAACA,KAAK,CAACrB,OAAO,CAAC;UACpC;;IACD;EAEL;CACD;AAxEYN,YAAY,eAHxBD,UAAU,CAAC;EACV8B,UAAU,EAAE;CACb,CAAC,GACW7B,YAAY,CAwExB;SAxEYA,YAAY","names":["Injectable","ErrorService","constructor","toastr","pribvate","roter","showToastW","message","warning","progressBar","positionClass","showToastS","success","reloadCurrentRoute","currentUrl","router","url","navigateByUrl","skipLocationChange","then","navigate","handelEmptyFilds","obj","isMessage","emptyCount","property","length","handelError","error","status","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\error.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService {\n  constructor(private toastr: ToastrService,pribvate roter :Router) {}\n\n  showToastW(message: string) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right',\n    });\n  }\n\n  showToastS(message: string) {\n    this.toastr.success(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-right',\n    });\n  }\n\n    reloadCurrentRoute() {\n    let currentUrl = this.router.url;\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate([currentUrl]);\n    });\n  }\n\n\n  handelEmptyFilds(obj: any, isMessage: boolean = true): boolean {\n    var emptyCount: number = 0;\n\n    for (var property in obj) {\n      if (typeof obj[property] === 'number') {\n        if (obj[property] < 1) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n\n      if (typeof obj[property] === 'string') {\n        if (obj[property].length == 0) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n    }\n\n    if (emptyCount != 0) return true;\n    else return false;\n  }\n\n  handelError(error: any) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n\n      default: {\n        this.showToastW(error.error.message);\n        break;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}