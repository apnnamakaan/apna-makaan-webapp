{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class UserService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.token = '';\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: this.token\n    });\n  }\n  setToken() {\n    this.token = localStorage.getItem('token') || '';\n    console.warn(localStorage.getItem('token'));\n  }\n  getUser() {\n    this.setToken();\n    this.http.get(Apis.user.getUser, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, this.apiResponse.status, {\n          progressBar: true\n        });\n      },\n      error: error => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAO9D,OAAM,MAAOC,WAAW;EAatBC,YAAoBC,IAAgB,EAAUC,MAAqB;IAA/C,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAZ7C,UAAK,GAAW,EAAE;IAElB,gBAAW,GAAQ;MACxBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACV;IAEM,YAAO,GAAQ,IAAIN,WAAW,CAAC;MACpC,cAAc,EAAE,iCAAiC;MACjDO,aAAa,EAAE,IAAI,CAACC;KACrB,CAAC;EAEoE;EAEtEC,QAAQ;IACN,IAAI,CAACD,KAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAChDC,OAAO,CAACC,IAAI,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAC7C;EAEAG,OAAO;IACL,IAAI,CAACL,QAAQ,EAAE;IACf,IAAI,CAACN,IAAI,CAACY,GAAG,CAAChB,IAAI,CAACiB,IAAI,CAACF,OAAO,EAAE;MAAEG,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAACC,SAAS,CAAC;MACpEC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,WAAW,GAAGD,GAAG;QACtB,IAAI,CAAChB,MAAM,CAACkB,OAAO,CAAC,IAAI,CAACD,WAAW,CAACf,OAAO,EAAE,IAAI,CAACe,WAAW,CAAChB,MAAM,EAAE;UACrEkB,WAAW,EAAE;SACd,CAAC;MACJ,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACH,WAAW,GAAGG,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACpB,MAAM,CAACqB,OAAO,CAAC,IAAI,CAACJ,WAAW,CAACf,OAAO,EAAE,EAAE,EAAE;UAChDiB,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;;AApCWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["Apis","HttpHeaders","UserService","constructor","http","toastr","status","message","Authorization","token","setToken","localStorage","getItem","console","warn","getUser","get","user","headers","subscribe","next","res","apiResponse","success","progressBar","error","warning","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { user } from './../models/user';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  public token: string = '';\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    Authorization: this.token,\n  });\n\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\n\n  setToken(){\n    this.token = localStorage.getItem('token') || '';\n    console.warn(localStorage.getItem('token'))\n  }\n\n  getUser() {\n    this.setToken()\n    this.http.get(Apis.user.getUser, { headers: this.headers }).subscribe({\n      next: (res) => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, this.apiResponse.status, {\n          progressBar: true,\n        });\n      },\n      error: (error) => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}