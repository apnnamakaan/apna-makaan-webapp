{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./error.service\";\nexport class PropertyService {\n  constructor(http, toastr, errorService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.errorService = errorService;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      authorization: this.getToken()\n    });\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.property = [];\n  }\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  getAllProperties() {\n    this.http.get(Apis.property.getAllProperties, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.property = res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n    console.log(property);\n    return property;\n  }\n  getPropertiesByFilter(data) {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    this.http.get(Apis.property.getPropertiesByFilter + uri, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        return res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n  uploadProperty(data) {\n    console.log(data);\n    this.http.post(Apis.property.uploadPropertie, data, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n  getPropertiesByEmail(email) {\n    this.http.get(Apis.property.getPropertiesByEmail + email, {\n      headers: this.headers\n    }).subscribe({\n      next: res => {\n        return res;\n      },\n      error: error => {\n        this.errorService.handelError(error);\n      }\n    });\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.ErrorService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Apis","HttpHeaders","PropertyService","constructor","http","toastr","errorService","authorization","getToken","status","message","localStorage","getItem","getAllProperties","get","property","headers","subscribe","next","res","error","handelError","console","log","getPropertiesByFilter","data","uri","city","bed","bath","garage","min","max","uploadProperty","post","uploadPropertie","apiResponse","success","progressBar","getPropertiesByEmail","email","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\property.service.ts"],"sourcesContent":["import { property } from './../models/property';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { Injectable } from '@angular/core';\nimport { Apis } from '../utils/apis';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorService } from './error.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PropertyService {\n  public headers: any = new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8',\n    authorization: this.getToken(),\n  });\n\n  public apiResponse: any = {\n    status: '',\n    message: '',\n  };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private errorService: ErrorService\n  ) {}\n\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n   property: Array<property> = [];\n\n  getAllProperties(): any {\n    \n    this.http\n      .get(Apis.property.getAllProperties, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.property = res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n    console.log(property);\n    return property;\n  }\n\n  getPropertiesByFilter(data: any): any {\n    var uri = `?city=${data.city}&bed=${data.bed}&bath=${data.bath}&garage=${data.garage}&min=${data.min}&max=${data.max}`;\n    this.http\n      .get(Apis.property.getPropertiesByFilter + uri, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          return res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  uploadProperty(data: any) {\n    console.log(data);\n\n    this.http\n      .post(Apis.property.uploadPropertie, data, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          this.apiResponse = res;\n          this.toastr.success(this.apiResponse.message, '', {\n            progressBar: true,\n          });\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n\n  getPropertiesByEmail(email: string): any {\n    this.http\n      .get(Apis.property.getPropertiesByEmail + email, {\n        headers: this.headers,\n      })\n      .subscribe({\n        next: (res) => {\n          return res as Array<property>;\n        },\n        error: (error) => {\n          this.errorService.handelError(error);\n        },\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}