{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/router\";\nexport class HelperService {\n  constructor(toastr, router) {\n    this.toastr = toastr;\n    this.router = router;\n  }\n  showToastW(message) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-center',\n      timeOut: 900\n    });\n  }\n  showToastS(message) {\n    this.toastr.success(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-center',\n      timeOut: 200\n    });\n  }\n  reloadCurrentRoute() {\n    let currentUrl = this.router.url;\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate([currentUrl]);\n    });\n  }\n  handelEmptyFilds(obj, isMessage = true) {\n    var emptyCount = 0;\n    for (var property in obj) {\n      if (typeof obj[property] === 'number') {\n        if (obj[property] < 1) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n      if (typeof obj[property] === 'string') {\n        if (obj[property].length == 0) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n    }\n    if (emptyCount != 0) return true;else return false;\n  }\n  handelError(error) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n      default:\n        {\n          if (error.error.message == null || error.error.message == undefined) this.showToastW('error occurs');else this.showToastW(error.error.message);\n          break;\n        }\n    }\n  }\n}\nHelperService.ɵfac = function HelperService_Factory(t) {\n  return new (t || HelperService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.Router));\n};\nHelperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HelperService,\n  factory: HelperService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,aAAa;EACxBC,YAAoBC,MAAqB,EAAUC,MAAc;IAA7C,WAAM,GAAND,MAAM;IAAyB,WAAM,GAANC,MAAM;EAAW;EAEpEC,UAAU,CAACC,OAAe;IACxB,IAAI,CAACH,MAAM,CAACI,OAAO,CAACD,OAAO,EAAE,EAAE,EAAE;MAC/BE,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,kBAAkB;MACjCC,OAAO,EAAE;KACV,CAAC;EACJ;EAEAC,UAAU,CAACL,OAAe;IACxB,IAAI,CAACH,MAAM,CAACS,OAAO,CAACN,OAAO,EAAE,EAAE,EAAE;MAC/BE,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,kBAAkB;MACjCC,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,kBAAkB;IAChB,IAAIC,UAAU,GAAG,IAAI,CAACV,MAAM,CAACW,GAAG;IAChC,IAAI,CAACX,MAAM,CAACY,aAAa,CAAC,GAAG,EAAE;MAAEC,kBAAkB,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CAAC,MAAK;MACrE,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAACL,UAAU,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAM,gBAAgB,CAACC,GAAQ,EAAEC,YAAqB,IAAI;IAClD,IAAIC,UAAU,GAAW,CAAC;IAE1B,KAAK,IAAIC,QAAQ,IAAIH,GAAG,EAAE;MACxB,IAAI,OAAOA,GAAG,CAACG,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAIH,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;UACrB,IAAIF,SAAS,EAAE,IAAI,CAACjB,UAAU,CAACmB,QAAQ,GAAG,WAAW,CAAC;UACtDD,UAAU,EAAE;;;MAIhB,IAAI,OAAOF,GAAG,CAACG,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACrC,IAAIH,GAAG,CAACG,QAAQ,CAAC,CAACC,MAAM,IAAI,CAAC,EAAE;UAC7B,IAAIH,SAAS,EAAE,IAAI,CAACjB,UAAU,CAACmB,QAAQ,GAAG,WAAW,CAAC;UACtDD,UAAU,EAAE;;;;IAKlB,IAAIA,UAAU,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC,KAC5B,OAAO,KAAK;EACnB;EAEAG,WAAW,CAACC,KAAU;IACpB,QAAQA,KAAK,CAACC,MAAM;MAClB,KAAK,CAAC;QACJ,IAAI,CAACvB,UAAU,CAAC,oBAAoB,CAAC;QACrC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,uBAAuB,CAAC;QACxC;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,aAAa,CAAC;QAC9B;MAEF,KAAK,GAAG;QACN,IAAI,CAACA,UAAU,CAAC,qBAAqB,CAAC;QACtC;MAEF;QAAS;UACP,IAAIsB,KAAK,CAACA,KAAK,CAACrB,OAAO,IAAI,IAAI,IAAIqB,KAAK,CAACA,KAAK,CAACrB,OAAO,IAAIuB,SAAS,EACjE,IAAI,CAACxB,UAAU,CAAC,cAAc,CAAC,CAAC,KAC7B,IAAI,CAACA,UAAU,CAACsB,KAAK,CAACA,KAAK,CAACrB,OAAO,CAAC;UACzC;;IACD;EAEL;;AA1EWL,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAA6B,SAAb7B,aAAa;EAAA8B,YAFZ;AAAM","names":["HelperService","constructor","toastr","router","showToastW","message","warning","progressBar","positionClass","timeOut","showToastS","success","reloadCurrentRoute","currentUrl","url","navigateByUrl","skipLocationChange","then","navigate","handelEmptyFilds","obj","isMessage","emptyCount","property","length","handelError","error","status","undefined","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\helper.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HelperService {\n  constructor(private toastr: ToastrService, private router: Router) {}\n\n  showToastW(message: string) {\n    this.toastr.warning(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-center',\n      timeOut: 900,\n    });\n  }\n\n  showToastS(message: string) {\n    this.toastr.success(message, '', {\n      progressBar: true,\n      positionClass: 'toast-top-center',\n      timeOut: 200,\n    });\n  }\n\n  reloadCurrentRoute() {\n    let currentUrl = this.router.url;\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate([currentUrl]);\n    });\n  }\n\n  handelEmptyFilds(obj: any, isMessage: boolean = true): boolean {\n    var emptyCount: number = 0;\n\n    for (var property in obj) {\n      if (typeof obj[property] === 'number') {\n        if (obj[property] < 1) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n\n      if (typeof obj[property] === 'string') {\n        if (obj[property].length == 0) {\n          if (isMessage) this.showToastW(property + ' is Empty');\n          emptyCount++;\n        }\n      }\n    }\n\n    if (emptyCount != 0) return true;\n    else return false;\n  }\n\n  handelError(error: any) {\n    switch (error.status) {\n      case 0:\n        this.showToastW('Connection Refused');\n        break;\n\n      case 500:\n        this.showToastW('Internal Server Error');\n        break;\n\n      case 502:\n        this.showToastW('Bad Gateway');\n        break;\n\n      case 503:\n        this.showToastW('Service Unavailable');\n        break;\n\n      default: {\n        if (error.error.message == null || error.error.message == undefined)\n          this.showToastW('error occurs');\n        else this.showToastW(error.error.message);\n        break;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}