{"ast":null,"code":"import { Apis } from '../utils/apis';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/shared/services/user.service\";\nexport class AuthService {\n  constructor(http, toastr, router, userService) {\n    this.http = http;\n    this.toastr = toastr;\n    this.router = router;\n    this.userService = userService;\n    this.isLogedin = false;\n    this.tokenRes = {\n      token: ''\n    };\n    this.apiResponse = {\n      status: '',\n      message: ''\n    };\n    this.checkIsLogedIn();\n  }\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigateByUrl('login');\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n  signup(userData) {\n    this.http.post(Apis.signup, userData).subscribe({\n      next: res => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true\n        });\n        this.router.navigateByUrl('');\n      },\n      error: error => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n  login(userData) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: res => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + ' ' + this.tokenRes.token);\n        this.router.navigateByUrl('');\n      },\n      error: error => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true\n        });\n      }\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.UserService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAASA,IAAI,QAAQ,eAAe;;;;;;AAKpC,OAAM,MAAOC,WAAW;EAKtBC,YACUC,IAAgB,EAChBC,MAAqB,EACrBC,MAAc,EACdC,WAAyB;IAHzB,SAAI,GAAJH,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IARd,cAAS,GAAY,KAAK;IACzB,aAAQ,GAAQ;MAAEC,KAAK,EAAE;IAAE,CAAE;IAC7B,gBAAW,GAAQ;MAAEC,MAAM,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAE,CAAE;IAQpD,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACR,MAAM,CAACS,aAAa,CAAC,OAAO,CAAC;;IAEpC,IAAIH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MACzC,IAAI,CAACC,SAAS,GAAG,IAAI;;EAEzB;EAEAE,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACN,cAAc,EAAE;EACvB;EAEAO,MAAM,CAACC,QAAc;IACnB,IAAI,CAACf,IAAI,CAACgB,IAAI,CAACnB,IAAI,CAACiB,MAAM,EAAEC,QAAQ,CAAC,CAACE,SAAS,CAAC;MAC9CC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACC,WAAW,GAAGD,GAAG;QACtB,IAAI,CAAClB,MAAM,CAACoB,OAAO,CAAC,IAAI,CAACD,WAAW,CAACd,OAAO,EAAE,EAAE,EAAE;UAChDgB,WAAW,EAAE;SACd,CAAC;QACF,IAAI,CAACpB,MAAM,CAACS,aAAa,CAAC,EAAE,CAAC;MAC/B,CAAC;MACDY,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACH,WAAW,GAAGG,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACtB,MAAM,CAACuB,OAAO,CAAC,IAAI,CAACJ,WAAW,CAACd,OAAO,EAAE,EAAE,EAAE;UAChDgB,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;EAEAG,KAAK,CAACV,QAAc;IAClB,IAAI,CAACf,IAAI,CAACgB,IAAI,CAACnB,IAAI,CAAC4B,KAAK,EAAEV,QAAQ,CAAC,CAACE,SAAS,CAAC;MAC7CC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACO,QAAQ,GAAGP,GAAG;QACnBX,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAE,QAAQ,GAAG,GAAG,GAAG,IAAI,CAACD,QAAQ,CAACtB,KAAK,CAAC;QACnE,IAAI,CAACF,MAAM,CAACS,aAAa,CAAC,EAAE,CAAC;MAC/B,CAAC;MACDY,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACH,WAAW,GAAGG,KAAK,CAACA,KAAK;QAC9B,IAAI,CAACtB,MAAM,CAACuB,OAAO,CAAC,IAAI,CAACJ,WAAW,CAACd,OAAO,EAAE,EAAE,EAAE;UAChDgB,WAAW,EAAE;SACd,CAAC;MACJ;KACD,CAAC;EACJ;;AA7DWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;EAAA+B,YAFV;AAAM","names":["Apis","AuthService","constructor","http","toastr","router","userService","token","status","message","checkIsLogedIn","localStorage","getItem","isLogedin","navigateByUrl","logout","removeItem","signup","userData","post","subscribe","next","res","apiResponse","success","progressBar","error","warning","login","tokenRes","setItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\pika\\Documents\\apna-makaan\\apna-makaan-webapp\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { UserService } from 'src/app/shared/services/user.service';\nimport { Router } from '@angular/router';\nimport { user } from './../models/user';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Apis } from '../utils/apis';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public isLogedin: boolean = false;\n  private tokenRes: any = { token: '' };\n  private apiResponse: any = { status: '', message: '' };\n\n  constructor(\n    private http: HttpClient,\n    private toastr: ToastrService,\n    private router: Router\n    private userService : UserService\n  ) {\n    this.checkIsLogedIn();\n  }\n\n  checkIsLogedIn() {\n    if (localStorage.getItem('token') == null) {\n      this.isLogedin = false;\n      this.router.navigateByUrl('login');\n    }\n    if (localStorage.getItem('token') != null) {\n      this.isLogedin = true;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.checkIsLogedIn();\n  }\n\n  signup(userData: user) {\n    this.http.post(Apis.signup, userData).subscribe({\n      next: (res) => {\n        this.apiResponse = res;\n        this.toastr.success(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n        this.router.navigateByUrl('');\n      },\n      error: (error) => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n\n  login(userData: user) {\n    this.http.post(Apis.login, userData).subscribe({\n      next: (res) => {\n        this.tokenRes = res;\n        localStorage.setItem('token', 'bearer' + ' ' + this.tokenRes.token);\n        this.router.navigateByUrl('');\n      },\n      error: (error) => {\n        this.apiResponse = error.error;\n        this.toastr.warning(this.apiResponse.message, '', {\n          progressBar: true,\n        });\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}